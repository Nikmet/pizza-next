generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Перечисление ролей пользователей
enum UserRole {
    USER
    ADMIN
}

// Таблица пользователей
model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)

    provider   String?
    providerId String?

    cart Cart?

    orders Order[]

    verificationCode VerificationCode?
    verified         DateTime          @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Таблица категорий продуктов
model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products Product[]
}

// Таблица продуктов
model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    ingredients Ingredient[]

    items ProductItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Таблица информации о продукте
model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    productId Int
    product   Product @relation(fields: [productId], references: [id])

    cartItems CartItem[]
}

// Таблица ингредиентов
model Ingredient {
    id Int @id @default(autoincrement())

    name     String @unique
    price    Int
    imageUrl String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Таблица корзины
model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Таблица элементов корзины
model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Перечисление статусов заказа
enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

// Таблица заказов
model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus @default(PENDING)
    paymentId   String?

    items Json

    fullName String
    phone    String
    address  String
    email    String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Таблица кодов верификации
model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String @unique

    createdAt DateTime @default(now())
}
